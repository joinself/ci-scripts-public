#!/usr/bin/env python3
#
# Slack release notification.
#
# Example:
#   ./slack-release-notification -v 1.2.3

import os
import subprocess
import argparse
import urllib.request
import re

ap = argparse.ArgumentParser()
ap.add_argument('-b', '--build-id', help='Build ID')
ap.add_argument('-n', '--namespace', help='Project namespace')
ap.add_argument('-v', '--version', required=True, help='Release version')
args = ap.parse_args()

slack_webhook = os.getenv('SLACK_WEBHOOK_CI_PLATFORM')
namespace = os.getenv('CI_PROJECT_NAMESPACE')
project = os.getenv('CI_PROJECT_NAME')
build_id = args.build_id
version = args.version

if args.namespace:
    namespace = args.namespace

if re.search('-rc\.[0-9]*$', version):
  kind = 'release candidate'
else:
  kind = 'release'

subject_raw = subprocess.run(['git', 'log', '-n', '1', '--format=%s'], stdout=subprocess.PIPE)
body_raw = subprocess.run(['git', 'log', '-n', '1', '--format=%b'], stdout=subprocess.PIPE)

subject = subject_raw.stdout.decode('utf-8').replace('"', '\\"').rstrip('\n')
body = body_raw.stdout.decode('utf-8').replace('*', '-').replace('\r', '').replace('\n\n', '\n').replace('"', '\\"').rstrip('\n')

if build_id is not None:
  if body == '':
      data = '{{"text":"New {} <https://github.com/{}/{}|{}> <https://github.com/{}/{}/commits/{}|{}> (build: {})\n\n- {}"}}'.format(kind, namespace, project, project, namespace, project, version, version, build_id, subject)
  else:
      data = '{{"text":"New {} <https://github.com/{}/{}|{}> <https://github.com/{}/{}/commits/{}|{}> (build: {})\n\n{}"}}'.format(kind, namespace, project, project, namespace, project, version, version, build_id, body)
else:
  if body == '':
    data = '{{"text":"New {} <https://github.com/{}/{}|{}> <https://github.com/{}/{}/commits/{}|{}>\n\n- {}"}}'.format(kind, namespace, project, project, namespace, project, version, version, subject)
  else:
    data = '{{"text":"New {} <https://github.com/{}/{}|{}> <https://github.com/{}/{}/commits/{}|{}>\n\n{}"}}'.format(kind, namespace, project, project, namespace, project, version, version, body)

req = urllib.request.Request(url = slack_webhook, data=bytes(data.encode('utf-8')))
req.add_header('Content-type', 'application/json')

urllib.request.urlopen(req)
